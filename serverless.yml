service:
  name: step-functions-test

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  stage: ${opt:stage, self:provider.stage}

plugins:
  - serverless-step-functions
  - serverless-webpack

provider:
  name: aws
  stage: dev
  region: ap-northeast-1
  runtime: nodejs12.x
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  hello:
    handler: functions/hello.handler
  echo:
    handler: functions/echo.handler
  entry:
    handler: functions/entry.handler
  mapTask:
    handler: functions/mapTask.handler
  notify:
    handler: functions/notify.handler

resources:
  Resources:
    myMapStateMachineLogs:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/stepfunctions/myMapStateMachine-${self:custom.stage}-Logs

stepFunctions:
  validate: true
  stateMachines:
    hellostepfunc1:
      name: myStateMachine-${self:custom.stage}
      tracingConfig:
        enabled: true
      definition:
        Comment: "A Hello World example of the Amazon States Language using an AWS Lambda Function"
        StartAt: HelloWorld1
        States:
          HelloWorld1:
            Type: Task
            Resource:
              Fn::GetAtt: [hello, Arn]
            Next: echo
          echo:
            Type: Task
            Resource:
              Fn::GetAtt: [echo, Arn]
            End: true
    mapStateMachine:
      name: myMapStateMachine-${self:custom.stage}
      tracingConfig:
        enabled: true
      loggingConfig:
        level: ALL
        includeExecutionData: true
        destinations:
          - Fn::GetAtt: [myMapStateMachineLogs, Arn]
      definition:
        Comment: "map test"
        StartAt: FirstState
        States:
          FirstState:
            Type: Task
            Resource:
              Fn::GetAtt: [entry, Arn]
            Next: mapped_task
          mapped_task:
            Type: Map
            InputPath: $.users
            MaxConcurrency: 2
            Iterator:
              StartAt: FirstMapTask
              States:
                FirstMapTask:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [mapTask, Arn]
                  End: true
            Next: NotifyState
          NotifyState:
            Type: Task
            InputPath: $
            Resource:
              Fn::GetAtt: [notify, Arn]
            End: true
